# This is a dedicated workflow for the Predictive Maintenance app that runs Terraform and deploys the app in GitHub.

name: Deploy Predictive Maintenance App

on:
  push:
    paths:
      - app/**
      - terraform/**
      - .github/workflows/deploy-predictive-maintenance.yaml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Authenticate to GCP and build kubeconfig
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 -d > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json"
          gcloud config set project ai-solution-456211

          CLUSTER_NAME="my-cluster"
          CLUSTER_REGION="europe-central2"
          ENDPOINT=$(gcloud container clusters describe $CLUSTER_NAME --region $CLUSTER_REGION --format="value(endpoint)")
          CA_CERT=$(gcloud container clusters describe $CLUSTER_NAME --region $CLUSTER_REGION --format="value(masterAuth.clusterCaCertificate)")
          ACCESS_TOKEN=$(gcloud auth print-access-token)

          cat > $GITHUB_WORKSPACE/ci-kubeconfig.yaml <<EOF
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority-data: ${CA_CERT}
              server: https://${ENDPOINT}
            name: gke_cluster
          contexts:
          - context:
              cluster: gke_cluster
              user: gke_user
            name: gke_context
          current-context: gke_context
          users:
          - name: gke_user
            user:
              token: ${ACCESS_TOKEN}
          EOF

      - name: Set KUBECONFIG and Terraform credentials
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json" >> $GITHUB_ENV
          echo "KUBECONFIG=$GITHUB_WORKSPACE/ci-kubeconfig.yaml" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_kubeconfig_path: ${{ env.KUBECONFIG }}
        run: terraform apply -auto-approve

      - name: Build and Deploy Predictive Maintenance App
        run: |
          kubectl config get-contexts
          kubectl get ns || echo "kubectl not working"

          docker build -t predictive-maintenance-app ./app
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml

          kubectl rollout status deployment predictive-maintenance-app -n ai-solution
