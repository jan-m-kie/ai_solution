name: CrewAI Full Automation

on:
  workflow_dispatch:
  push:
    paths:
      - crewai.yaml
      - src/**
      - terraform/**

jobs:
  crewai_and_terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
          pip install crewai

      - name: List Poetry packages
        run: poetry show

      - name: Get recent file changes
        id: changes
        run: |
          echo "files=$(git diff --name-only HEAD^ HEAD | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Save changes to file for CrewAI
        run: |
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            git diff HEAD^ HEAD > diff.txt
          else
            echo "Initial commit or no previous commit found" > diff.txt
          fi

      - name: Patch crewai.yaml with Git diff
        run: |
          DIFF=$(cat diff.txt | sed 's/\\/\\\\/g; s/"/\\"/g' | awk '{printf "%s\\n", $0}')
          awk -v diff="$DIFF" '{gsub("{{DIFF}}", diff)}1' crewai.yaml > temp.yaml && mv temp.yaml crewai.yaml

      - name: Run CrewAI using CLI
        run: crewai run

      - name: Commit generated .tf files
        run: |
          git config --global user.email "ai-bot@crewai"
          git config --global user.name "CrewAI Bot"
          git add terraform/*.tf || echo "No .tf files to commit"
          git commit -m "Auto: Commit infra files from CrewAI" || echo "Nothing to commit"
          git push || echo "No changes to push"

      - name: Authenticate to GCP and build kubeconfig
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" | base64 -d > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json"
          gcloud config set project ai-solution-456211

          CLUSTER_NAME="my-cluster"
          CLUSTER_REGION="europe-central2"
          ENDPOINT=$(gcloud container clusters describe $CLUSTER_NAME --region $CLUSTER_REGION --format="value(endpoint)")
          CA_CERT=$(gcloud container clusters describe $CLUSTER_NAME --region $CLUSTER_REGION --format="value(masterAuth.clusterCaCertificate)")
          ACCESS_TOKEN=$(gcloud auth print-access-token)

          cat > $GITHUB_WORKSPACE/ci-kubeconfig.yaml <<EOF
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority-data: ${CA_CERT}
              server: https://${ENDPOINT}
            name: gke_cluster
          contexts:
          - context:
              cluster: gke_cluster
              user: gke_user
            name: gke_context
          current-context: gke_context
          users:
          - name: gke_user
            user:
              token: ${ACCESS_TOKEN}
          EOF

      - name: Set Google Application Credentials for Terraform
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json" >> $GITHUB_ENV

      - name: Set KUBECONFIG env var
        run: echo "KUBECONFIG=$GITHUB_WORKSPACE/ci-kubeconfig.yaml" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Force Unlock if Locked
        working-directory: terraform
        run: |
          LOCK_FILE="gs://terraform-ai-solution-state/terraform/state/default.tflock"
          if gsutil -q stat "$LOCK_FILE"; then
            echo "Lock file found. Attempting to force unlock..."
            LOCK_ID=$(gsutil cat "$LOCK_FILE" | grep -o '"ID":"[^\"]*"' | cut -d':' -f2 | tr -d '"')
            echo "Lock ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID" || echo "Force unlock failed or not required"
          else
            echo "No lock file present. Proceeding."
          fi

      - name: Terraform Conditional Import existing namespace
        working-directory: terraform
        env:
          TF_VAR_kubeconfig_path: ${{ env.KUBECONFIG }}
        run: |
          if ! terraform state show kubernetes_namespace.ai_solution > /dev/null 2>&1; then
            terraform import kubernetes_namespace.ai_solution ai-solution
          else
            echo "Namespace already in state. Skipping import."
          fi

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_kubeconfig_path: ${{ env.KUBECONFIG }}
        run: terraform apply -auto-approve

      - name: Cleanup stale Terraform lock (post-failure)
        if: failure()
        working-directory: terraform
        run: |
          echo "Checking for lock file in GCS..."
          gsutil rm gs://terraform-ai-solution-state/terraform/state/default.tflock || echo "No lock to remove"

      - name: Print current kubeconfig context (debug)
        run: |
          kubectl config get-contexts
          kubectl get ns || echo "kubectl not working"
